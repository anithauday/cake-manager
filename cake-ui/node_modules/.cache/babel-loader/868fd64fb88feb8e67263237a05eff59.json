{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../../Constants';\nimport { parseJwt } from './Helpers';\nexport const cakeApi = {\n  authenticate,\n  getUsers,\n  getCakes,\n  deleteOrder,\n  createCake,\n  getUserMe\n};\n\nfunction authenticate(username, password) {\n  return instance.post('/auth/login', {\n    username,\n    password\n  }, {\n    headers: {\n      'Content-type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  });\n}\n\nfunction getUsers(user, username) {\n  const url = username ? `/api/users/${username}` : '/api/users';\n  return instance.get(url, {\n    headers: {\n      'Authorization': bearerAuth(user)\n    }\n  });\n}\n\nfunction getCakes(user) {\n  const url = '/api/v1';\n  return instance.get(url, {\n    headers: {\n      'Authorization': bearerAuth(user),\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  });\n}\n\nfunction createCake(user, cake) {\n  return instance.post('/api/v1/cake', cake, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(user)\n    }\n  });\n}\n\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n});\ninstance.interceptors.request.use(function (config) {\n  // If token is expired, redirect user to login\n  if (config.headers.Authorization) {\n    const token = config.headers.Authorization.split(' ')[1];\n    const data = parseJwt(token);\n\n    if (Date.now() > data.exp * 1000) {\n      window.location.href = \"/login\";\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction bearerAuth(user) {\n  return `Bearer ${user.accessToken}`;\n}","map":{"version":3,"sources":["/Users/baran/Desktop/cake-manager/cake-ui/src/components/misc/CakeApi.js"],"names":["axios","config","parseJwt","cakeApi","authenticate","getUsers","getCakes","deleteOrder","createCake","getUserMe","username","password","instance","post","headers","user","url","get","bearerAuth","cake","create","baseURL","API_BASE_URL","interceptors","request","use","Authorization","token","split","data","Date","now","exp","window","location","href","error","Promise","reject","accessToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,YADqB;AAErBC,EAAAA,QAFqB;AAGrBC,EAAAA,QAHqB;AAIrBC,EAAAA,WAJqB;AAKrBC,EAAAA,UALqB;AAMrBC,EAAAA;AANqB,CAAhB;;AASP,SAASL,YAAT,CAAsBM,QAAtB,EAAgCC,QAAhC,EAA0C;AACxC,SAAOC,QAAQ,CAACC,IAAT,CAAc,aAAd,EAA6B;AAAEH,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA7B,EAAqD;AAC1DG,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAuC,qCAA+B;AAAtE;AADiD,GAArD,CAAP;AAGD;;AAGD,SAAST,QAAT,CAAkBU,IAAlB,EAAwBL,QAAxB,EAAkC;AAChC,QAAMM,GAAG,GAAGN,QAAQ,GAAI,cAAaA,QAAS,EAA1B,GAA8B,YAAlD;AACA,SAAOE,QAAQ,CAACK,GAAT,CAAaD,GAAb,EAAkB;AACvBF,IAAAA,OAAO,EAAE;AAAE,uBAAiBI,UAAU,CAACH,IAAD;AAA7B;AADc,GAAlB,CAAP;AAGD;;AAED,SAAST,QAAT,CAAkBS,IAAlB,EAAwB;AACtB,QAAMC,GAAG,GAAG,SAAZ;AACA,SAAOJ,QAAQ,CAACK,GAAT,CAAaD,GAAb,EAAkB;AACvBF,IAAAA,OAAO,EAAE;AAAE,uBAAiBI,UAAU,CAACH,IAAD,CAA7B;AAAsC,qCAA+B;AAArE;AADc,GAAlB,CAAP;AAGD;;AAED,SAASP,UAAT,CAAoBO,IAApB,EAA0BI,IAA1B,EAAgC;AAC9B,SAAOP,QAAQ,CAACC,IAAT,CAAc,cAAd,EAA8BM,IAA9B,EAAoC;AACzCL,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiBI,UAAU,CAACH,IAAD;AAFpB;AADgC,GAApC,CAAP;AAMD;;AAGD,MAAMH,QAAQ,GAAGZ,KAAK,CAACoB,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEpB,MAAM,CAACe,GAAP,CAAWM;AADQ,CAAb,CAAjB;AAIAV,QAAQ,CAACW,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAUxB,MAAV,EAAkB;AAClD;AACA,MAAIA,MAAM,CAACa,OAAP,CAAeY,aAAnB,EAAkC;AAChC,UAAMC,KAAK,GAAG1B,MAAM,CAACa,OAAP,CAAeY,aAAf,CAA6BE,KAA7B,CAAmC,GAAnC,EAAwC,CAAxC,CAAd;AACA,UAAMC,IAAI,GAAG3B,QAAQ,CAACyB,KAAD,CAArB;;AACA,QAAIG,IAAI,CAACC,GAAL,KAAaF,IAAI,CAACG,GAAL,GAAW,IAA5B,EAAkC;AAChCC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD;AACF;;AACD,SAAOlC,MAAP;AACD,CAVD,EAUG,UAAUmC,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAZD;;AAeA,SAASlB,UAAT,CAAoBH,IAApB,EAA0B;AACxB,SAAQ,UAASA,IAAI,CAACwB,WAAY,EAAlC;AACD","sourcesContent":["import axios from 'axios'\nimport { config } from '../../Constants'\nimport { parseJwt } from './Helpers'\n\nexport const cakeApi = {\n  authenticate,\n  getUsers,\n  getCakes,\n  deleteOrder,\n  createCake,\n  getUserMe\n}\n\nfunction authenticate(username, password) {\n  return instance.post('/auth/login', { username, password }, {\n    headers: { 'Content-type': 'application/json' , \"Access-Control-Allow-Origin\": \"*\"}\n  })\n}\n\n\nfunction getUsers(user, username) {\n  const url = username ? `/api/users/${username}` : '/api/users'\n  return instance.get(url, {\n    headers: { 'Authorization': bearerAuth(user) }\n  })\n}\n\nfunction getCakes(user) {\n  const url = '/api/v1'\n  return instance.get(url, {\n    headers: { 'Authorization': bearerAuth(user) , \"Access-Control-Allow-Origin\": \"*\" }\n  })\n}\n\nfunction createCake(user, cake) {\n  return instance.post('/api/v1/cake', cake, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(user)\n    }\n  })\n}\n\n\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n})\n\ninstance.interceptors.request.use(function (config) {\n  // If token is expired, redirect user to login\n  if (config.headers.Authorization) {\n    const token = config.headers.Authorization.split(' ')[1]\n    const data = parseJwt(token)\n    if (Date.now() > data.exp * 1000) {\n      window.location.href = \"/login\"\n    }\n  }\n  return config\n}, function (error) {\n  return Promise.reject(error)\n})\n\n\nfunction bearerAuth(user) {\n  return `Bearer ${user.accessToken}`\n}"]},"metadata":{},"sourceType":"module"}