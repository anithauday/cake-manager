{"ast":null,"code":"var _jsxFileName = \"/Users/baran/Desktop/cake-manager/cake-ui/src/components/home/Login.js\";\nimport React, { Component } from 'react';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport { Button, Form, Grid, Segment, Message } from 'semantic-ui-react';\nimport AuthContext from '../context/AuthContext';\nimport { cakeApi } from '../misc/CakeApi';\nimport { parseJwt, handleLogError } from '../misc/Helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      password: '',\n      isLoggedIn: false,\n      isError: false\n    };\n\n    this.handleInputChange = (e, {\n      name,\n      value\n    }) => {\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        username,\n        password\n      } = this.state;\n\n      if (!(username && password)) {\n        this.setState({\n          isError: true\n        });\n        return;\n      }\n\n      cakeApi.authenticate(username, password).then(response => {\n        const {\n          accessToken\n        } = response.data;\n        const data = parseJwt(accessToken);\n        const user = {\n          data,\n          accessToken\n        };\n        const Auth = this.context;\n        Auth.userLogin(user);\n        this.setState({\n          username: '',\n          password: '',\n          isLoggedIn: true,\n          isError: false\n        });\n      }).catch(error => {\n        handleLogError(error);\n        this.setState({\n          isError: true\n        });\n      });\n    };\n\n    this.getReferer = () => {\n      const locationState = this.props.location.state;\n      return locationState && locationState.referer ? locationState.referer : '/';\n    };\n  }\n\n  componentDidMount() {\n    const Auth = this.context;\n    const isLoggedIn = Auth.userIsAuthenticated();\n    this.setState({\n      isLoggedIn\n    });\n  }\n\n  render() {\n    const {\n      isLoggedIn,\n      isError\n    } = this.state;\n    const referer = this.getReferer();\n\n    if (isLoggedIn) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: referer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n          style: {\n            maxWidth: 450\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form, {\n            size: \"large\",\n            onSubmit: this.handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(Segment, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n                fluid: true,\n                autoFocus: true,\n                name: \"username\",\n                icon: \"user\",\n                iconPosition: \"left\",\n                placeholder: \"Username\",\n                onChange: this.handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n                fluid: true,\n                name: \"password\",\n                icon: \"lock\",\n                iconPosition: \"left\",\n                placeholder: \"Password\",\n                type: \"password\",\n                onChange: this.handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"violet\",\n                fluid: true,\n                size: \"large\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Message, {\n            children: [`Don't have already an account? `, /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/signup\",\n              color: \"violet\",\n              as: NavLink,\n              to: \"/signup\",\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), isError && /*#__PURE__*/_jsxDEV(Message, {\n            negative: true,\n            children: \"The username or password provided are incorrect!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nLogin.contextType = AuthContext;\nexport default Login;","map":{"version":3,"sources":["/Users/baran/Desktop/cake-manager/cake-ui/src/components/home/Login.js"],"names":["React","Component","NavLink","Redirect","Button","Form","Grid","Segment","Message","AuthContext","cakeApi","parseJwt","handleLogError","Login","state","username","password","isLoggedIn","isError","handleInputChange","e","name","value","setState","handleSubmit","preventDefault","authenticate","then","response","accessToken","data","user","Auth","context","userLogin","catch","error","getReferer","locationState","props","location","referer","componentDidMount","userIsAuthenticated","render","maxWidth","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { Button, Form, Grid, Segment, Message } from 'semantic-ui-react'\nimport AuthContext from '../context/AuthContext'\nimport { cakeApi } from '../misc/CakeApi'\nimport { parseJwt, handleLogError } from '../misc/Helpers'\n\nclass Login extends Component {\n  static contextType = AuthContext\n\n  state = {\n    username: '',\n    password: '',\n    isLoggedIn: false,\n    isError: false\n  }\n\n  componentDidMount() {\n    const Auth = this.context\n    const isLoggedIn = Auth.userIsAuthenticated()\n    this.setState({ isLoggedIn })\n  }\n\n  handleInputChange = (e, {name, value}) => {\n    this.setState({ [name]: value })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    const { username, password } = this.state\n    if (!(username && password)) {\n      this.setState({ isError: true })\n      return\n    }\n\n    cakeApi.authenticate(username, password)\n      .then(response => {\n        const { accessToken } = response.data\n        const data = parseJwt(accessToken)\n        const user = { data, accessToken }\n\n        const Auth = this.context\n        Auth.userLogin(user)\n\n        this.setState({\n          username: '',\n          password: '',\n          isLoggedIn: true,\n          isError: false\n        })\n      })\n      .catch(error => {\n        handleLogError(error)\n        this.setState({ isError: true })\n      })\n  }\n\n  getReferer = () => {\n    const locationState = this.props.location.state\n    return locationState && locationState.referer ? locationState.referer : '/'\n  }\n\n  render() {\n    const { isLoggedIn, isError } = this.state\n    const referer = this.getReferer()\n    if (isLoggedIn) {\n      return <Redirect to={referer} />\n    } else {\n      return (\n        <Grid textAlign='center'>\n          <Grid.Column style={{ maxWidth: 450 }}>\n            <Form size='large' onSubmit={this.handleSubmit}>\n              <Segment>\n                <Form.Input\n                  fluid\n                  autoFocus\n                  name='username'\n                  icon='user'\n                  iconPosition='left'\n                  placeholder='Username'\n                  onChange={this.handleInputChange}\n                />\n                <Form.Input\n                  fluid\n                  name='password'\n                  icon='lock'\n                  iconPosition='left'\n                  placeholder='Password'\n                  type='password'\n                  onChange={this.handleInputChange}\n                />\n                <Button color='violet' fluid size='large'>Login</Button>\n              </Segment>\n            </Form>\n            <Message>{`Don't have already an account? `}\n              <a href='/signup' color='violet' as={NavLink} to=\"/signup\">Sign Up</a>\n            </Message>\n            {isError && <Message negative>The username or password provided are incorrect!</Message>}\n          </Grid.Column>\n        </Grid>\n      )\n    }\n  }\n}\n\nexport default Login"]},"metadata":{},"sourceType":"module"}